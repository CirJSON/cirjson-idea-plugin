cirjson.array=array
cirjson.object=object
cirjson.property=property
cirjson.no_id=without ID
cirjson.with_id=with ID
unnamed.desc=<unnamed>
cirjson.id=ID

# Syntax errors
syntax.error.missing.closing.quote=Missing closing quote
syntax.error.illegal.escape.sequence=Illegal escape sequence
syntax.error.illegal.unicode.escape.sequence=Illegal unicode escape sequence
syntax.error.illegal.floating.point.literal=Illegal floating point literal
syntax.error.control.char.in.string=Control character ''{0}'' is not allowed in string literals

# Inspections
cirJson.inspection.group=CirJSON
inspection.compliance.name=Compliance with JSON standard
inspection.compliance.msg.comments=CirJSON standard does not allow comments
inspection.compliance.msg.single.quoted.strings=CirJSON standard does not allow single quoted strings
inspection.compliance.msg.bad.token=CirJSON standard does not allow such tokens
inspection.compliance.msg.illegal.property.key=CirJSON standard allows only double-quoted string as property key
inspection.compliance.msg.trailing.comma=CirJSON standard does not allow trailing comma
inspection.compliance.msg.multiple.top.level.values=CirJSON standard allows only one top-level value
inspection.compliance.msg.id.key.as.property.key=CirJSON standard does not allow "__cirJsonId__" to be used as property key
inspection.compliance.msg.empty.id=CirJSON standard does not allow empty ID
inspection.compliance.msg.array.without.id=CirJSON standard does not allow an array to not start with an ID
inspection.compliance.option.comments=Warn about comments
inspection.compliance.option.multiple.top.level.values=Warn about multiple top-level values
inspection.compliance.option.trailing.comma=Warn about trailing commas
inspection.compliance.option.nan.infinity=Warn about NaN and Infinity/-Infinity numeric values
inspection.duplicate.keys.name=Duplicate keys in object literals
inspection.duplicate.keys.msg.duplicate.keys=Object contains duplicate keys ''{0}''
inspection.id.different.type=Different data types share the same ID
inspection.id.different.type.msg=Different data types share the same ID ''{0}''

# Formatter
formatter.align.properties.caption=Align

formatter.align.properties.none=Do not align
formatter.align.properties.on.colon=On colon
formatter.align.properties.on.value=On value
formatter.space_within_braces.label=Braces
formatter.space_before_colon.label=Before ':'
formatter.space_after_colon.label=After ':'
formatter.trailing_comma.label=Trailing comma
formatter.wrapping_arrays.label=Arrays
formatter.objects.label=Objects

# Quickfixes and editor actions
# Quickfixes
quickfix.add.double.quotes.desc=Wrap with double quotes

# Actions
action.navigate.to.duplicates=Navigate to duplicate
action.navigate.to.duplicates.header=Duplicates of ''{0}''
action.navigate.to.duplicates.desc=''{0}'' at line #{1}
action.navigate.to.other.id.usages=Navigate to other ID usage
action.navigate.to.other.id.usage.header=Usages of ID ''{0}''
action.navigate.to.other.id.usage.desc=''{0}'' at line #{1}

# Surrounding
surround.with.object.literal.desc=Object Literal
surround.with.array.literal.desc=Array Literal
surround.with.quotes.desc=Quotes
cirjson.copy.to.clipboard=Copy {0} to clipboard
action.ConsoleView.ShowAsCirJsonAction.text=Show as CirJSON

# Live template
cirjson.template.context.type=CirJSON
cirjson.property.keys=CirJSON property keys
cirjson.string.values=CirJSON string values

# Annotation
annotation.property.key=Property key

# Colors
color.page.attribute.keyword=Keyword
color.page.attribute.string=String
color.page.attribute.number=Number
color.page.attribute.colon=Colon
color.page.attribute.comma=Comma
color.page.attribute.brackets=Brackets
color.page.attribute.braces=Braces
color.page.attribute.block.comment=Block comment
color.page.attribute.line.comment=Line comment
color.page.attribute.property.key=Property key
color.page.attribute.invalid.escape.sequence=Invalid escape sequence
color.page.attribute.valid.escape.sequence=Valid escape sequence
color.page.attribute.parameter=Parameter
qualified.name.qualified=qualified name
qualified.name.pointer=CirJSON pointer

settings.display.name.cirjson=CirJSON

# Intentions
cirjson.intention.category.name=CirJSON
cirjson.intention.sort.properties=Sort properties alphabetically
cirjson.intention.sort.properties.cannot.sort.properties=Cannot Sort Properties
cirjson.intention.sort.properties.file.is.readonly=File is readonly

settings.cirjson.schema.add.mapping=Add mapping
settings.cirjson.schema.edit.mapping=Edit mapping
settings.cirjson.schema.remove.mapping=Remove mapping
configurable.CirJsonSmartKeysConfigurable.display.name=CirJSON
settings.smart.keys.insert.missing.comma.on.enter=Insert missing comma on Enter
settings.smart.keys.insert.missing.comma.after.matching.braces.and.quotes=Insert missing comma after matching braces and quotes
settings.smart.keys.automatically.manage.commas.when.pasting.cirJson.fragments=Automatically manage commas when pasting CirJSON fragments
settings.smart.keys.escape.text.on.paste.in.string.literals=Escape text on paste in string literals
settings.smart.keys.automatically.add.quotes.to.property.names.when.typing.comma=Automatically add quotes to property names when typing ':'
settings.smart.keys.automatically.add.whitespace.when.typing.comma.after.property.names=Automatically add whitespace when typing ':' after property names
settings.smart.keys.automatically.move.colon.after.the.property.name.if.typed.inside.quotes=Automatically move ':' after the property name if typed inside quotes
settings.smart.keys.automatically.move.comma.after.the.property.value.or.array.element.if.inside.quotes=Automatically move comma after the property value or array element if inside quotes

# Schema
# Schema mapping
schema.mapping.file=file
schema.mapping.pattern=file path pattern
schema.mapping.directory=directory

# Schema documentation
schema.documentation.deprecated.postfix= (deprecated)

# Schema reader
schema.reader.cant.load.file=Cannot load CirJSON Schema file ''{0}''
schema.reader.cant.load.model=Cannot load code model for CirJSON Schema file ''{0}''
schema.reader.file.too.large=CirJSON schema was not loaded from ''{0}'' because it''s too large (file size is {1} bytes)
schema.reader.file.empty=CirJSON schema was not loaded from ''{0}''. File is empty
schema.reader.file.not.found.or.error=CirJSON Schema not found or contains error in ''{0}'': {1}

# Schema validation
schema.validation.property=property {0}
schema.validation.properties=properties {0}
schema.validation.array.shorter.than=Array is shorter than {0}
schema.validation.array.longer.than=Array is longer than {0}
schema.validation.array.not.contains=No match for 'contains' rule
schema.validation.array.no.extra=Additional items are not allowed
schema.validation.not.unique=Item is not unique
schema.validation.enum.mismatch=Value should be one of: {0}
schema.validation.against.not=Validates against 'not' schema
schema.validation.integer.expected=Integer value expected
schema.validation.number.expected=Double value expected
schema.validation.not.multiple.of=Is not multiple of {0}
schema.validation.greater.than.exclusive.maximum=Greater than the exclusive maximum {0}
schema.validation.greater.than.maximum=Greater than the maximum {0}
schema.validation.less.than.exclusive.minimum=Less than the exclusive minimum {0}
schema.validation.less.than.minimum=Less than the minimum {0}
schema.validation.missing.required.property.or.properties=Missing required {0}
schema.validation.missing.not.required.property.or.properties=Missing optional {0}
schema.validation.number.of.props.less.than=Number of properties is less than {0}
schema.validation.number.of.props.greater.than=Number of properties is greater than {0}
schema.validation.violated.dependency=Dependency is violated: {0} must be specified, since ''{1}'' is specified
schema.validation.string.shorter.than=String is shorter than {0}
schema.validation.string.longer.than=String is longer than {0}
schema.validation.invalid.string.pattern=Cannot check the string by pattern because of an error: {0}
schema.validation.string.violates.pattern=String violates the pattern: ''{0}''
schema.validation.actual=Actual:
schema.validation.incompatible.types=Incompatible types.
schema.validation.required.one=Required: {0}.{1}
schema.validation.required.one.of=Required one of: {0}.{1}
schema.validation.to.more.than.one=Validates to more than one variant
schema.validation.one.of.property.sets.required=One of the following property sets is required: {0}
schema.validation.at.least.one.of.property.sets.required=Should have at least one of the following property sets: {0}
