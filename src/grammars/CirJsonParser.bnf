{
    parserClass = 'org.cirjson.plugin.idea.CirJsonParser'
    parserUtilClass = "org.cirjson.plugin.idea.psi.CirJsonParserUtil"
    psiPackage = 'org.cirjson.plugin.idea.psi'
    psiImplPackage = 'org.cirjson.plugin.idea.psi.impl'

    elementTypeHolderClass = 'org.cirjson.plugin.idea.CirJsonElementTypes'
    elementTypeClass = 'org.cirjson.plugin.idea.CirJsonElementType'
    psiClassPrefix = "CirJson"
    psiVisitorName = "CirJsonElementVisitor"

    psiImplUtilClass = 'org.cirjson.plugin.idea.psi.impl.CirJsonPsiImplUtils'
    tokenTypeClass = 'org.cirjson.plugin.idea.CirJsonTokenType'

    implements("value") = "org.cirjson.plugin.idea.psi.CirJsonElement"
    extends("value") = "org.cirjson.plugin.idea.psi.impl.CirJsonElementImpl"

    tokens = [
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'

        COMMA=','
        COLON=':'
        LINE_COMMENT='regexp://.*'
        // "/*" ([^*]|\*+[^*/])* (\*+"/")?
        BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
        // else /\*(?:[^*]|\*[^/])*\*+/

        // unclosed string literal matches till the line's end
        // any escape sequences included, illegal escapes are indicated by SyntaxHighlighter
        // and JsonStringLiteralAnnotator
        ID_KEY='"__cirJsonId__"'
        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
        // STRING='regexp:"([^\\"\r\n]|\\([\\"/bfnrt]|u[a-fA-F0-9]{4}))*"?'

        NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
        TRUE='true'
        FALSE='false'
        NULL='null'
        // Actually not defined in RFC 4627, but may be used for JSON5 and helps with
        // auto completion of keywords. Semantically, it represents "bad word" type
        // of tokens
        // Could be as loose as [^\s\[\]{}:,\"\']+, but is slightly more restricted
        // for the time being to match most forms of npm package names and semver versions
        // in package.json.
        // See https://github.com/npm/validate-npm-package-name
        IDENTIFIER="regexp:[[:jletterdigit:]~!()*\-./@\^<>=]+"
    ]

    extends("container|literal|reference_expression")=value
    extends("array|object")=container
    extends("string_literal|number_literal|boolean_literal|null_literal")=literal
    implements("property")=[
        "org.cirjson.plugin.idea.psi.CirJsonElement"
        "com.intellij.psi.PsiNamedElement"
    ]
}

// For compatibility we allow any value at root level (see JsonStandardComplianceAnnotator)
// Empty file is also allowed
cirJson ::= value*

object ::= '{' object_id_element [(',' object_element*)] '}' {
    pin=1
    methods=[
        getId
        findProperty
        getPresentation
    ]
    mixin="org.cirjson.plugin.idea.psi.impl.CirJsonObjectMixin"
}

object_id_element ::= id_key_literal ':' string_literal {
    methods=[
        getId
    ]
}

// Hackity-hack to parse array elements and properties even if separating commas are missing,
// TODO: Find out if there is any simpler way to do so in GrammarKit
private object_element ::= property (','|&'}') {
    recoverWhile = not_brace_or_next_value
    pin = 1
}

private property_value ::= value

property ::= property_name (':' property_value) {
    methods=[
        getName
        getNameElement
        getValue
        // suppress getValueList() accessor
        value=""
        getPresentation
    ]
    mixin="org.cirjson.plugin.idea.psi.impl.CirJsonPropertyMixin"
    pin(".*")=1
}

private property_name ::= literal | reference_expression

array ::= '[' string_literal ']' | '[' string_literal ',' array_element* ']' {
    methods=[
        getPresentation
        getId
        getIdLiteral
    ]
    pin=1
}

private array_element ::= value (','|&']') {
    recoverWhile = not_bracket_or_next_value
    pin=1
}

id_key_literal ::= ID_KEY
string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING {
    methods=[
        getTextFragments
        getValue
        isPropertyName
        isId
        SINGLE_QUOTED_STRING=""
        DOUBLE_QUOTED_STRING=""
    ]
    mixin="org.cirjson.plugin.idea.psi.impl.CirJsonStringLiteralMixin"
}
number_literal ::= NUMBER {
    methods=[
        NUMBER=""
        getValue
    ]
}
boolean_literal ::= TRUE | FALSE {
    methods=[
        getValue
    ]
}
null_literal ::= NULL

literal ::= string_literal | number_literal | boolean_literal | null_literal {
    methods=[
        isQuotedString
    ]
    mixin="org.cirjson.plugin.idea.psi.impl.CirJsonLiteralMixin"
}

fake container ::=

reference_expression ::= IDENTIFIER {
    mixin="org.cirjson.plugin.idea.psi.impl.CirJsonReferenceLiteralMixin"
}

value ::= literal | reference_expression | array | object

// Recoveries
private not_bracket_or_next_value ::= !(']'|value)
private not_brace_or_next_value ::= !('}'|value)